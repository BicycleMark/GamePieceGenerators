#!/usr/bin/env node

/**
 * Post-Process ZIP for 7-Segment LED Display Generator
 * 
 * This script processes a ZIP file generated by the 7-Segment LED Display Generator,
 * replacing placeholders with actual Git information and file checksums.
 * 
 * Usage:
 *   node post-process-zip.js <zip-file>
 * 
 * Example:
 *   node post-process-zip.js 7segment-digits-SVG-20250405.zip
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const crypto = require('crypto');
const JSZip = require('jszip');

// Check if a ZIP file was provided
if (process.argv.length < 3) {
  console.error('Please provide a ZIP file to process');
  console.error('Usage: node post-process-zip.js <zip-file>');
  process.exit(1);
}

const zipFile = process.argv[2];

// Function to execute Git commands
function execGitCommand(command) {
  try {
    return execSync(command, { encoding: 'utf8' }).trim();
  } catch (error) {
    console.error(`Error executing Git command: ${command}`, error);
    return "";
  }
}

// Function to calculate SHA-256 checksum of a file
function calculateChecksum(buffer) {
  try {
    const hashSum = crypto.createHash('sha256');
    hashSum.update(buffer);
    return hashSum.digest('hex');
  } catch (error) {
    console.error(`Error calculating checksum:`, error);
    return "";
  }
}

// Function to get Git repository information
function getGitRepositoryInfo() {
  console.log('Getting Git repository information...');
  
  try {
    const repoUrl = execGitCommand('git config --get remote.origin.url');
    const branch = execGitCommand('git branch --show-current');
    const commitId = execGitCommand('git rev-parse HEAD');
    const commitMessage = execGitCommand('git log -1 --pretty=%B');
    const commitDate = execGitCommand('git log -1 --pretty=%aI');
    const tags = execGitCommand('git tag --points-at HEAD').split('\n').filter(Boolean);
    
    // Get recent commits (last 3)
    const recentCommitsRaw = execGitCommand('git log -3 --pretty="%H|%s|%aI"');
    const recentCommits = recentCommitsRaw.split('\n').filter(Boolean).map(line => {
      const [id, message, date] = line.split('|');
      return { id, message, date };
    });
    
    return {
      url: repoUrl,
      branch,
      commit: {
        id: commitId,
        message: commitMessage,
        date: commitDate
      },
      tags,
      recentCommits
    };
  } catch (error) {
    console.error('Error getting Git repository information:', error);
    return { error: "Failed to get Git repository information" };
  }
}

// Function to get user information from Git configuration
function getUserInfo() {
  console.log('Getting user information from Git configuration...');
  
  try {
    const name = execGitCommand('git config user.name');
    const email = execGitCommand('git config user.email');
    
    return {
      name,
      email
    };
  } catch (error) {
    console.error('Error getting user information:', error);
    return { error: "Failed to get user information" };
  }
}

// Function to get environment information
function getEnvironmentInfo() {
  console.log('Getting environment information...');
  
  try {
    const os = process.platform;
    const nodeVersion = process.version;
    
    return {
      os,
      nodeVersion,
      appVersion: "1.0.0", // Application version
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('Error getting environment information:', error);
    return { error: "Failed to get environment information" };
  }
}

// Main function
async function main() {
  console.log(`Processing ZIP file: ${zipFile}`);
  
  try {
    // Read the ZIP file
    const zipData = fs.readFileSync(zipFile);
    const zip = await JSZip.loadAsync(zipData);
    
    // Get GeneratedDigits.json
    const generatedDigitsFile = zip.file('GeneratedDigits.json');
    if (!generatedDigitsFile) {
      throw new Error('GeneratedDigits.json not found in ZIP file');
    }
    
    // Parse GeneratedDigits.json
    const generatedDigitsContent = await generatedDigitsFile.async('string');
    const generatedDigits = JSON.parse(generatedDigitsContent);
    
    // Get Git repository information
    const repoInfo = getGitRepositoryInfo();
    
    // Get user information
    const userInfo = getUserInfo();
    
    // Get environment information
    const envInfo = getEnvironmentInfo();
    
    // Calculate file checksums
    console.log('Calculating file checksums...');
    const fileIntegrity = {
      checksumAlgorithm: "SHA-256",
      files: {}
    };
    
    // Process each file in the ZIP
    for (const filename in zip.files) {
      // Skip directories and GeneratedDigits.json
      if (zip.files[filename].dir || filename === 'GeneratedDigits.json') {
        continue;
      }
      
      // Get file content
      const fileContent = await zip.files[filename].async('nodebuffer');
      
      // Calculate checksum
      const checksum = calculateChecksum(fileContent);
      
      // Add to fileIntegrity
      fileIntegrity.files[filename] = checksum;
    }
    
    // Update metadata
    generatedDigits.metadata.repository = repoInfo;
    generatedDigits.metadata.user = userInfo;
    generatedDigits.metadata.environment = envInfo;
    generatedDigits.metadata.fileIntegrity = fileIntegrity;
    
    // Update GeneratedDigits.json in the ZIP
    zip.file('GeneratedDigits.json', JSON.stringify(generatedDigits, null, 2));
    
    // Generate new ZIP file
    const newZipData = await zip.generateAsync({ type: 'nodebuffer' });
    
    // Write new ZIP file
    const newZipFile = zipFile.replace('.zip', '-processed.zip');
    fs.writeFileSync(newZipFile, newZipData);
    
    console.log(`Processed ZIP file saved as: ${newZipFile}`);
  } catch (error) {
    console.error('Error processing ZIP file:', error);
    process.exit(1);
  }
}

// Run the main function
main().catch(error => {
  console.error('Error:', error);
  process.exit(1);
});
