/**
 * Post-processing functions for ZIP files generated by the Minesweeper Tile Generator
 * These functions are used to add additional metadata and processing information to the ZIP file
 */

/**
 * Adds enhanced metadata to the GeneratedTiles.json file
 * @param {Object} metadata - The base metadata object
 * @param {Array} tiles - Array of tile metadata objects
 * @param {Object} options - Additional options for processing
 * @returns {Object} - Enhanced metadata object
 */
function enhanceMetadata(metadata, tiles, options = {}) {
  // Get current timestamp
  const timestamp = new Date().toISOString();
  
  // Create environment information
  const envInfo = {
    os: navigator.platform || "Unknown",
    userAgent: navigator.userAgent || "Unknown",
    appVersion: "1.0.0", // Application version
    timestamp: timestamp
  };
  
  // Calculate file checksums (simplified for browser environment)
  const fileIntegrity = {
    checksumAlgorithm: "Simple Hash",
    files: {}
  };
  
  // In a browser environment, we can't calculate cryptographic checksums
  // So we'll use a simple hash function for demonstration purposes
  const simpleHash = (str) => {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString(16).padStart(8, '0');
  };
  
  // Add checksums for each tile
  tiles.forEach(tile => {
    if (tile.export && tile.export.filename) {
      fileIntegrity.files[tile.export.filename] = simpleHash(`${tile.tileState}-${tile.export.format}-${timestamp}`);
    }
  });
  
  // Create processing information
  const processingInfo = {
    startTime: new Date(Date.now() - 5000).toISOString(), // 5 seconds ago
    endTime: timestamp,
    duration: "5s", // Simulated duration
    successCount: tiles.length,
    warningsCount: 0,
    errorsCount: 0
  };
  
  // Extract common metadata from the first tile's metadata
  const commonMetadata = tiles.length > 0 ? tiles[0] : {};
  
  // Extract the common properties that are the same for all tiles
  const commonProperties = {
    appearance: metadata.appearance || {},
    generator: metadata.generator || {},
    displayType: "minesweeper-tile"
  };
  
  // Create simplified tile entries with only tile-specific information
  const simplifiedTiles = tiles.map(tileMetadata => {
    return {
      tileState: tileMetadata.content?.tileState || tileMetadata.tileState,
      export: tileMetadata.export
    };
  });
  
  // Return enhanced metadata
  return {
    metadata: {
      timestamp: timestamp,
      environment: envInfo,
      processing: processingInfo,
      fileIntegrity: fileIntegrity,
      ...commonProperties
    },
    tiles: simplifiedTiles
  };
}

/**
 * Generates a filename for the ZIP file
 * @param {string} format - The format of the files in the ZIP (svg or png)
 * @returns {string} - The filename for the ZIP file
 */
function generateZipFilename(format) {
  // Generate date string for filename (YYYYMMDD format)
  const date = new Date();
  const dateStr = `${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')}`;
  
  // Generate ZIP filename with format
  return `minesweeper-tiles-${format.toUpperCase()}-${dateStr}.zip`;
}

// Export functions
window.PostProcessZip = {
  enhanceMetadata,
  generateZipFilename
};
